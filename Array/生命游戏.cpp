/*
根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例:

输入: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
进阶:

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
*/

class Solution {
public:
    /*
    0 死细胞 未被统计
    1 活细胞 未被统计
    2 死细胞 变为 活细胞 已经统计
    3 活细胞 变为 活细胞 已经统计
    4 死细胞 变为 死细胞 已经统计
    5 活细胞 变为 死细胞 已经统计
    */
    void gameOfLife(vector<vector<int>>& board) {
        if ( board.empty() || board[0].empty() )
            return;
        int x[8] = {-1,-1,-1,0,0,1,1,1};
        int y[8] = {-1,0,1,-1,1,-1,0,1};
        int m = board.size(), n = board[0].size();
        for ( int i = 0 ; i < m ; i++ ) {
            for ( int j = 0 ; j < n ; j++ ) {
                int count = 0;
                for ( int k = 0 ; k < 8 ; k++ ) {
                    int tmpx = i + x[k];
                    int tmpy = j + y[k];
                    if ( tmpx < 0 || tmpx >= m || tmpy < 0 || tmpy >= n )
                        continue;
                    if ( board[tmpx][tmpy] % 2 )  // 统计活细胞
                        count++;
                }
                if ( board[i][j] % 2 ) {  // 原先为活细胞
                    if ( count == 2 || count == 3 )
                        board[i][j] = 3;
                    else
                        board[i][j] = 5;  // 变为死细胞
                }
                else {                    // 原先为死细胞
                    if ( count == 3 )
                        board[i][j] = 2;  // 变为活细胞
                    else
                        board[i][j] = 4;
                }
            }
        }
        for ( int i = 0 ; i < m ; i++ ) {
            for ( int j = 0 ; j < n ; j++ ) {
                board[i][j] = (board[i][j] >= 4) ? 0 : 1;
            }
        }
    }
};
